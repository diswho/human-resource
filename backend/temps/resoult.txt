class Node:
    """Represents a node in a tree structure."""

    def __init__(self, id, dept_code, dept_name, dept_parentcode):
        self.id = id
        self.dept_code = dept_code
        self.dept_name = dept_name
        self.dept_parentcode = dept_parentcode
        self.children = []

    def add_child(self, child):
        """Adds a child node to this node."""
        self.children.append(child)

# Example departments data
departments = [
    (1, "A", "Root Department", None),
    (2, "B", "Branch 1", "A"),
    (3, "C", "Branch 2", "A"),
    (4, "D", "Sub-Branch 1", "B"),
    (5, "E", "Sub-Branch 2", "B"),
    (6, "F", "Sub-Branch 3", "C"),
    (7, "G", "Leaf Node", "D")
]

# Create a dictionary to store nodes by their ID
nodes = {}

# Build the tree structure
for id, dept_code, dept_name, dept_parentcode in departments:
    node = Node(id, dept_code, dept_name, dept_parentcode)
    nodes[id] = node  # Store the node in the dictionary

# Link parent-child relationships
for id, dept_code, dept_name, dept_parentcode in departments:
    if dept_parentcode:
        parent_node = nodes[dept_parentcode]
        parent_node.add_child(nodes[id])

# Get the root node (assuming the first department with a None parent is the root)
root = nodes[departments[0][0]]

# Print the tree structure
def print_tree(node, level=0):
    """Prints the tree structure recursively."""
    print("  " * level + f"ID: {node.id}, Code: {node.dept_code}, Name: {node.dept_name}")
    for child in node.children:
        print_tree(child, level + 1)

print_tree(root)
